{"version":3,"sources":["compontents/TodoList.js","compontents/TodoItem.js","App.js","serviceWorker.js","reducer.js","index.js","actions.js"],"names":["TodoList","_this","this","active","todo","completed","all","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","props","todos","filter","eval","path","map","_TodoItem_js__WEBPACK_IMPORTED_MODULE_6__","title","key","id","toggleCompleted","deleteTodo","Component","mapStateToProps","state","mapDispatchToProps","dispatch","todoID","toggleTodo","connect","TodoItem","type","defaultChecked","onClick","App","search","handleLoadSearchResults","event","setState","target","value","keyHandling","keyCode","addTodo","Object","objectSpread","react_default","placeholder","autoFocus","onChange","onKeyDown","Switch","Route","exact","process","render","numberOfActiveTodos","NavLink","to","activeClassName","clearCompleted","length","clearCompletedTodos","Boolean","window","location","hostname","match","initState","todosList","nextID","store","createStore","arguments","undefined","action","console","log","index","findIndex","payload","slice","TOGGLE_TODO","ADD_TODO","newTodo","userId","push","DELETE_TODO","splice","CLEAR_COMPLETED_TODOS","__REDUX_DEVTOOLS_EXTENSION__","routing","BrowserRouter","es","src_App","pathname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","__webpack_require__","d","__webpack_exports__"],"mappings":"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","file":"static/js/main.49aa0b11.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport TodoItem from \"./TodoItem.js\";\nimport { connect } from \"react-redux\";\nimport { toggleTodo, deleteTodo} from '../actions.js';\n\n\nclass TodoList extends Component {\n \n  render() {\n    // let newTodos = this.props.todos.slice();\n    const active = todo => !todo.completed;\n    const completed = todo => todo.completed;\n    const all = todo => todo\n    \n    return (\n      <section className=\"main\">\n        <ul className=\"todo-list\">\n        \n          {this.props.todos.filter(eval(this.props.path)).map(todo => (\n            <TodoItem\n              title={todo.title}\n              completed={todo.completed}\n              key={todo.id}\n              toggleCompleted={() => this.props.toggleCompleted(todo.id)}\n              deleteTodo={() => this.props.deleteTodo(todo.id)}\n            />\n          ))}\n        </ul>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return { todos: state.todos };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n      toggleCompleted: (todoID) => {dispatch(toggleTodo(todoID))},\n      deleteTodo: todoID => {dispatch(deleteTodo(todoID))}\n    }\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(TodoList);\n","import React, { Component } from \"react\";\n// import { connect } from 'react-redux';\n\n\n\nclass TodoItem extends Component {\n  render() {\n    return (\n      <li className={this.props.completed ? \"completed\" : \"\"}>\n        <div className=\"view\">\n          <input\n            className=\"toggle\"\n            type=\"checkbox\"\n            defaultChecked={this.props.completed}\n            onClick={this.props.toggleCompleted}\n          />\n          <label>{this.props.title}</label>\n          <button className=\"destroy\" onClick={this.props.deleteTodo} />\n        </div>\n      </li>\n    );\n  }\n}\n\n// const mapStateToProps = state => {\n//   return { todos: state.todos };\n// };\n// const mapDispatchToProps = dispatch => {\n//   return {\n//       toggleCompleted: (todoID) => {dispatch(toggleTodo(todoID))},\n//       deleteTodo: todoID => {dispatch(deleteTodo(todoID))}\n//     }\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(TodoItem);\nexport default TodoItem;\n","import React, { Component } from \"react\";\nimport \"./index.css\";\n// import todosList from \"./todos.json\";\nimport TodoList from \"./compontents/TodoList.js\";\nimport { NavLink, Switch, Route } from \"react-router-dom\";\nimport { connect } from 'react-redux';\n// import { createStore, combineReducers } from 'redux';\nimport { addTodo, clearCompletedTodos } from './actions.js';\n\n// import thunk from 'redux-thunk';\n\n\nclass App extends Component {\n  state = {\n    // todos: todosList,\n    search: \"\",\n    // nextID: todosList.length + 1\n  };\n\n  // toggleCompleted = todosId => event => {\n  //   let index = this.state.todos.findIndex(todo => todo.id === todosId);\n  //   let newTodoList = this.state.todos.slice();\n  //   newTodoList[index].completed = !newTodoList[index].completed;\n  //   this.setState({ todos: newTodoList });\n  // };\n\n  // deleteTodo = todosId => event => {\n  //   let index = this.state.todos.findIndex(todo => todo.id === todosId);\n  //   let newTodoList = this.state.todos.slice();\n  //   newTodoList.splice(index, 1);\n  //   this.setState({ todos: newTodoList });\n  // };\n\n  handleLoadSearchResults = event => {\n    this.setState({\n      search: event.target.value\n    });\n  };\n\n  // clearCompleted = () => {\n  //   let newTodoList = this.state.todos.slice();\n  //   newTodoList = newTodoList.filter(todo => todo.completed === false);\n  //   this.setState({ todos: newTodoList });\n  // };\n\n  keyHandling = event => {\n    if (event.keyCode === 13) {\n      // const newTodo = {\n      //   userId: 1,\n      //   id: this.state.nextID,\n      //   title: this.state.search,\n      //   completed: false\n      // };\n      // const newTodoList = this.state.todos.slice();\n      // newTodoList.push(newTodo);\n      // this.setState(previousState => ({\n      //   todos: newTodoList,\n      //   search: \"\",\n      //   nextID: previousState.nextID + 1\n      // }));\n      this.props.addTodo(this.state.search);\n      this.setState({...this.state, search:\"\"})\n    }\n  };\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            autoFocus\n            type=\"text\"\n            value={this.state.search}\n            onChange={this.handleLoadSearchResults}\n            onKeyDown={this.keyHandling}\n          />\n        </header>\n        <Switch>\n          <Route exact path={process.env.PUBLIC_URL + \"/\"} render={()=> <TodoList path=\"all\"\n            />}/>\n          <Route path={process.env.PUBLIC_URL + \"/active\"} render={()=> <TodoList path=\"active\"\n          />}/>\n          <Route path={process.env.PUBLIC_URL + \"/completed\"} render={()=> <TodoList path=\"completed\"\n          />}/>\n        </Switch>\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            <strong>\n              {this.props.numberOfActiveTodos}\n            </strong>{\" \"}\n            item(s) left\n          </span>\n          <ul className=\"filters\">\n            <li>\n              <NavLink\n                exact\n                to=\"/\"\n                activeClassName=\"selected\"\n              >\n                All\n              </NavLink>\n            </li>\n            <li>\n              <NavLink\n                to=\"/active\"\n                activeClassName=\"selected\"\n              >\n                Active\n              </NavLink>\n            </li>\n            <li>\n              <NavLink\n                to=\"/completed\"\n                activeClassName=\"selected\"\n              >\n                Completed\n              </NavLink>\n            </li>\n          </ul>\n          <button className=\"clear-completed\" onClick={this.props.clearCompleted}>\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { numberOfActiveTodos: state.todos.filter(todo => !todo.completed).length };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n      // toggleCompleted: (todoID) => {dispatch(toggleTodo(todoID))},\n      // deleteTodo: todoID => {dispatch(deleteTodo(todoID))},\n      clearCompleted: () => {dispatch(clearCompletedTodos())},\n      keyHandling: (todo) => {dispatch(addTodo(todo))},\n      addTodo: (todo) => {dispatch(addTodo(todo))}\n    }\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { TOGGLE_TODO, ADD_TODO, DELETE_TODO, CLEAR_COMPLETED_TODOS } from './actions.js';\nimport todosList from './todos.json';\n\n\nconst initState = {\n    todos: todosList,\n    search: \"\",\n    nextID: todosList.length + 1\n  }\n\nexport const reducer = (state = initState, action) => {\n    console.log(action)\n    const index = state.todos.findIndex(todo => todo.id === action.payload);\n    let todos = state.todos.slice();\n    switch (action.type){\n        case TOGGLE_TODO:\n        todos[index].completed = !todos[index].completed\n        return {...state, todos};\n        case ADD_TODO:\n        const newTodo = {\n            userId: 1,\n            id: state.nextID,\n            title: action.payload,\n            completed: false\n          };\n        // const todos = state.todos.slice();\n        todos.push(newTodo)\n        const nextID = state.nextID + 1;\n        return {\n            todos,\n            search: \"\",\n            nextID\n          }\n        case DELETE_TODO:\n        todos.splice(index,1);\n        return {...state, todos};\n        case CLEAR_COMPLETED_TODOS:\n        todos = todos.filter(todo => todo.completed === false)\n        return {...state, todos};\n        default: return state;\n    }\n}\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter, Route} from \"react-router-dom\";\n// import TodoList from \"./compontents/TodoList\";\nimport { Provider } from \"react-redux\";\nimport { reducer } from \"./reducer.js\";\nimport { createStore } from \"redux\";\n\nconst store = createStore(\n    reducer, /* preloadedState, */\n   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );\nconst routing = (\n  <BrowserRouter>\n    <Provider store={store}>\n      <Route render={(props)=><App pathname={process.env.PUBLIC_URL + \"/\" + props.location.pathname}/>}/>\n    </Provider>\n  </BrowserRouter>\n);\nReactDOM.render(routing, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// import React from 'react'\n// import { Provider, connect } from 'react-redux'\n// import { createStore, combineReducers, applyMiddleware } from 'redux'\n// import thunk from 'redux-thunk'\n\n// import rootReducer from './redux/reducers'\n\nexport const TOGGLE_TODO = 'TOGGLE_TODO';\nexport const ADD_TODO = 'ADD_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';\nexport const CLEAR_COMPLETED_TODOS = 'CLEAR_COMPLETED_TODOS';\n\nexport const toggleTodo = todoID => {\n    return {\n        type: TOGGLE_TODO,\n        payload: todoID\n    }\n} \n\nexport const addTodo = todo => {\n    return {\n        type: ADD_TODO,\n        payload: todo\n    }\n}\n\nexport const deleteTodo = todoID => {\n    return {\n        type: DELETE_TODO,\n        payload: todoID\n    }\n}\n\nexport const clearCompletedTodos = () => {\n    return {\n        type: CLEAR_COMPLETED_TODOS\n    }\n}\n"],"sourceRoot":""}